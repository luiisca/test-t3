// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "cockroachdb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    refresh_token_expires_in Int

    user   User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model User {
    id                  String     @id @default(cuid())
    /// @zod.custom(imports.username)
    username            String?
    name                String?
    email               String?    @unique
    emailVerified       DateTime?
    image               String?
    completedOnboarding Boolean    @default(false)
    accounts            Account[]
    sessions            Session[]
    Feedback            Feedback[]

    country     String @default("US")
    inflation   Int    @default(8)
    currency    String @default("USD")
    investPerc  Int    @default(80)
    indexReturn Int    @default(7)

    salary     Salary[]
    categories Category[]
}

model Feedback {
    id      BigInt   @id @default(autoincrement())
    date    DateTime @default(now())
    rating  String
    comment String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Salary {
    id         BigInt   @id @default(autoincrement())
    title      String   @default("Salary")
    currency   String   @default("USD")
    amount     Int
    taxType    String   @default("perCat")
    taxPercent Int      @default(30)
    variance   Period[]

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Period {
    id     BigInt @id @default(autoincrement())
    from   Int
    amount Int

    salary     Salary @relation(fields: [salaryId], references: [id], onDelete: Cascade)
    salaryId   BigInt
    taxPercent Int    @default(30)
}

model Category {
    id        BigInt @id @default(autoincrement())
    title     String
    budget    Int
    currency  String @default("USD")
    type      String @default("outcome")
    inflType  String @default("perCat")
    country   String
    inflVal   Int
    icon      String
    freqType  String @default("perCat")
    frequency Int    @default(12)

    user    User     @relation(fields: [userId], references: [id])
    userId  String
    records Record[]
}

model Record {
    id        BigInt  @id @default(autoincrement())
    title     String?
    amount    Int
    type      String
    frequency Int
    inflType  Boolean @default(true)
    country   String
    inflation Int
    currency  String

    category   Category @relation(fields: [categoryId], references: [id])
    categoryId BigInt
}
